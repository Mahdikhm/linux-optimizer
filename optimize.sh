#!/bin/bash
#
# ===================================================================================
# Advanced Network Optimization Script for Linux Servers (VPN & High-Traffic)
#
# This script performs the following actions:
# 1. Enables the BBR congestion control algorithm.
# 2. Sets fq_codel as the default packet scheduler for better latency management.
# 3. Applies a comprehensive set of sysctl optimizations for TCP/IP performance,
#    buffer sizes, and connection handling, ideal for VPNs.
# 4. Ensures settings are persistent across reboots and apply to new interfaces.
# ===================================================================================

# Exit script on any error
set -e

# --- Helper Functions ---

# Function to display messages for different stages
log() {
    echo
    echo "--- $1 ---"
}

# Function to check if the script is run as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo "Error: Please run this script as root or with sudo."
        exit 1
    fi
}

# --- Main Script Logic ---

main() {
    check_root

    log "Starting ADVANCED network optimization with BBR and fq_codel"

    # 1. Check kernel version for BBR support (requires 4.9+)
    KERNEL_VERSION=$(uname -r | cut -d- -f1)
    REQUIRED_VERSION="4.9"

    if ! dpkg --compare-versions "$KERNEL_VERSION" "ge" "$REQUIRED_VERSION"; then
        echo "Error: Your kernel version ($KERNEL_VERSION) is too old for BBR."
        echo "Please upgrade your kernel to version $REQUIRED_VERSION or newer."
        exit 1
    fi
    echo "Kernel version ($KERNEL_VERSION) is compatible."

    # 2. Create a dedicated Sysctl config file for clean management
    SYSCTL_CONF_PATH="/etc/sysctl.d/98-advanced-network-optimizations.conf"
    log "Creating sysctl configuration file at: $SYSCTL_CONF_PATH"

    # Write all optimization settings to the file
    cat > "$SYSCTL_CONF_PATH" << 'EOF'
# === Advanced Network Optimizations (Generated by Script) ===

# --- BBR and Queuing Discipline ---
# Enable BBR congestion control for higher throughput and lower latency
net.ipv4.tcp_congestion_control = bbr
# Use fq_codel to reduce bufferbloat and improve responsiveness
net.core.default_qdisc = fq_codel

# --- IP Forwarding (CRITICAL for VPNs/Routers) ---
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding = 1

# --- TCP Performance Tuning ---
# Enable TCP Fast Open to speed up successive connections
net.ipv4.tcp_fastopen = 3
# Enable MTU probing to discover path MTU without relying on ICMP
net.ipv4.tcp_mtu_probing = 1
# Enable TCP window scaling for better performance on high-latency networks
net.ipv4.tcp_window_scaling = 1
# Selective Acknowledgements (SACK) is highly recommended
net.ipv4.tcp_sack = 1
# Enable TCP timestamps for better round-trip time measurement
net.ipv4.tcp_timestamps = 1
# Do not cache connection metrics from previous connections
net.ipv4.tcp_no_metrics_save = 1

# --- Connection Handling and Resource Management ---
# Reduce the time sockets stay in FIN-WAIT-2 state
net.ipv4.tcp_fin_timeout = 20
# Increase the number of connections allowed in TIME-WAIT state
net.ipv4.tcp_max_tw_buckets = 2000000
# Increase the maximum number of SYN "backlog" connections
net.ipv4.tcp_max_syn_backlog = 8192
# Increase the max number of packets queued on the input side
net.core.netdev_max_backlog = 16384
# Increase the maximum number of connections queued for acceptance
net.core.somaxconn = 8192

# --- Network Buffer Tuning (for high-speed networks) ---
# Set default and max buffer sizes for TCP read/write operations
# Format: min, default, max (in bytes)
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.tcp_wmem = 4096 65536 67108864
# Set default and max buffer sizes for all protocols
net.core.rmem_default = 65536
net.core.wmem_default = 65536
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864

# --- Keepalive Settings ---
# Send keepalive probes more frequently to detect dead connections faster
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6
EOF

    # 3. Apply sysctl settings immediately
    log "Applying all sysctl settings..."
    sysctl -p "$SYSCTL_CONF_PATH"

    # 4. Apply fq_codel qdisc on all active non-loopback network interfaces
    log "Applying fq_codel on all active interfaces..."
    INTERFACES=$(ip -o link show | awk -F': ' '{print $2}' | grep -v -E '^lo$')
    for IFACE in $INTERFACES; do
        echo "   - Configuring interface: $IFACE"
        tc qdisc replace dev "$IFACE" root fq_codel || echo "   - Warning: Failed to apply fq_codel on $IFACE."
    done

    # 5. Create a script to automatically apply fq_codel when new interfaces come up
    STARTUP_SCRIPT_PATH="/etc/network/if-up.d/apply-fq-codel-on-up"
    log "Creating/Updating startup script at: $STARTUP_SCRIPT_PATH"

    cat > "$STARTUP_SCRIPT_PATH" <<'EOF'
#!/bin/sh
# This script is called when a network interface comes up
# and applies the fq_codel algorithm to it.
IFACE="$1"
if [ "$IFACE" = "lo" ]; then
    exit 0
fi
# Apply fq_codel qdisc. Errors are suppressed.
/sbin/tc qdisc replace dev "$IFACE" root fq_codel > /dev/null 2>&1
exit 0
EOF

    # Make the startup script executable
    chmod +x "$STARTUP_SCRIPT_PATH"
    echo "Startup script is configured and executable."

    log "Advanced optimization process completed!"
    echo
    echo "All settings have been applied."
    echo "A reboot is recommended to ensure system-wide stability with the new parameters."
    echo "Reboot command: sudo reboot"
}

# Execute the main function
main "$@"
